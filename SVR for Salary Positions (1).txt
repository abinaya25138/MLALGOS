# get the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv("D:\Data Sets\Position_Salaries.csv")
# our dataset in this implementation is small, and thus we can print it all instead of viewing only the end
print(dataset)

# split the data into featutes and target variable seperately
X_l = dataset.iloc[:, 1:-1].values # features set
y_p = dataset.iloc[:, -1].values # set of study variable

print(X_l)

print(y_p)

#StandardScaler, the class we use to scale the data, takes in a 2D array; otherwise, it returns an error
#y_p variable from 1D to 2D. The code below does this for us:
y_p = y_p.reshape(-1,1)
y_p


from sklearn.preprocessing import StandardScaler
StdS_X = StandardScaler()
StdS_y = StandardScaler()
X_l = StdS_X.fit_transform(X_l)
y_p = StdS_y.fit_transform(y_p)

print("Scaled X_l:")
print(X_l)
print("Scaled y_p:")
print(y_p)


#As we can see from the obtained output, both variables were scaled within the range -3 and +3.
plt.scatter(X_l, y_p, color = 'red') # plotting the training set
plt.title('Scatter Plot') # adding a tittle to our plot
plt.xlabel('Levels') # adds a label to the x-axis
plt.ylabel('Salary') # adds a label to the y-axis
plt.show() # prints


#The plot shows a non-linear relationship between the Levels and Salary.
# import the model
from sklearn.svm import SVR
# create the model object
regressor = SVR(kernel = 'rbf')
# fit the model on the data
regressor.fit(X_l, y_p)


A=regressor.predict(StdS_X.transform([[6.5]]))
print(A)


# Convert A to 2D
A = A.reshape(-1,1)
print(A)


# Taking the inverse of the scaled value
A_pred = StdS_y.inverse_transform(A)
print(A_pred)

B_pred = StdS_y.inverse_transform(regressor.predict(StdS_X.transform([[6.5]])).reshape(-1,1))
print(B_pred)


# inverse the transformation to go back to the initial scale
plt.scatter(StdS_X.inverse_transform(X_l), StdS_y.inverse_transform(y_p), color = 'red')
plt.plot(StdS_X.inverse_transform(X_l), StdS_y.inverse_transform(regressor.predict(X_l).reshape(-1,1)), color = 'blue')
# add the title to the plot
plt.title('Support Vector Regression Model')
# label x axis
plt.xlabel('Position')
# label y axis
plt.ylabel('Salary Level')
# print the plot
plt.show()


#Reference is below link
#https://www.section.io/engineering-education/support-vector-regression-in-python/